# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: shared

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo BUILD_STEP

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
         
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1         
          role-to-assume: arn:aws:iam::174578073596:role/reddeer/AWSDeveloperAccess
          role-skip-session-tagging: true
          role-duration-seconds: 1200 #error: The requested DurationSeconds exceeds the MaxSessionDuration set for this role.

      - name: Amazon ECR "Login" Action for GitHub Actions
        id: login-ecr
        # You may pin to the exact commit or the version.
        # uses: aws-actions/amazon-ecr-login@b9c809dc38d74cd0fde3c13cc4fe4ac72ebecdae
        uses: aws-actions/amazon-ecr-login@v1
        with:
          # A comma-delimited list of AWS account IDs that are associated with the ECR registries. If you do not specify a registry, the default ECR registry is assumed.
          registries: 174578073596

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pathfinder-poc
          IMAGE_TAG: latest
        run: |
          # registery and image
          echo "printenv..."
          echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "printenv...2"
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
  deploy_test:
    needs: [build]
    environment: test
    runs-on: ubuntu-latest
    steps:
      - name: Run a one-line script
        env:
          ENV_NAME: ${{secrets.ENV_NAME}}         
        run: echo DEPLOY_TEST '$ENV_NAME' 
    
  deploy_prod:
    needs: [build, deploy_test]
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Run a one-line script
        env:
          ENV_NAME: ${{secrets.ENV_NAME}} 
        run: echo DEPLOY_PROD '$ENV_NAME'
  
